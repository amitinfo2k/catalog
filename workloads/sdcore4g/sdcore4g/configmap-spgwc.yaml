---
# Source: omec-control-plane/templates/configmap-spgwc.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spgwc-configs
  labels:
    release: sdcore4g
    app: spgwc
data:
  gx.conf: |
    Identity = "spgwc.default.svc.cluster.local";
    Realm = "default.svc.cluster.local";
    TLS_Cred = "config/spgwc.cert.pem",
               "config/spgwc.key.pem";
    TLS_CA = "config/cacert.pem";
    AppServThreads = 40;
    SCTP_streams = 3;
    NoRelay;
    No_IPv6;
    #Port = 3868;
    #SecPort = 3869;

    ConnectPeer = "pcrf.default.svc.cluster.local" { No_TLS; port = 3868; };

    LoadExtension = "/usr/local/lib/freeDiameter/dict_3gpp2_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_draftload_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_etsi283034_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc4004_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc4006bis_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc4072_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc4590_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc5447_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc5580_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc5777_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc5778_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc6734_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc6942_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc7155_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc7683_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_rfc7944_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29061_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29128_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29154_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29173_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29212_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29214_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29215_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29217_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29229_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29272_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29273_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29329_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29336_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29337_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29338_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29343_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29344_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29345_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29368_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts29468_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_ts32299_avps.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_CreditControl.fdx";
    LoadExtension = "/usr/local/lib/freeDiameter/dict_Gx.fdx";
  config.json: |-
    {
      "gx": {
        "host": "pcrf.default.svc.cluster.local",
        "host_type": "freediameter",
        "realm": "default.svc.cluster.local"
      }
    }
  cp.json: |-
    {
      "global": {
        "gxConfig": 1,
        "heartbeatFailure": true,
        "httpPort": 8080,
        "loggingLevel": "LOG_DEBUG",
        "periodicTimerSec": 10,
        "pfcpPort": 8805,
        "prometheusPort": 9089,
        "requestTimeoutMilliSec": 5000,
        "requestTries": 3,
        "s11Port": 2123,
        "transmitCount": 5,
        "transmitTimerSec": 2,
        "upfdnstimeout": 100,
        "urrConfig": 0
      },
      "ip_pool_config": {
        "staticUeIpPool": {
          "ip": "10.249.1.0",
          "mask": "255.255.255.0"
        },
        "ueIpPool": {
          "ip": "10.250.0.0",
          "mask": "255.255.0.0"
        }
      }
    }
  subscriber_mapping.json: |-
    {
      "access-profiles": {
        "access-all": {
          "type": "allow-all"
        },
        "apps-only": {
          "filter": "only_apps_network",
          "type": "specific-network"
        },
        "excluding-app": {
          "filter": "exclude-app-name",
          "type": "excluding-this-app"
        },
        "internet-only": {
          "filter": "No_private_network",
          "type": "internet-only"
        },
        "intranet-only": {
          "filter": "only_private_network",
          "type": "intranet-only"
        },
        "specific-app": {
          "filter": "allow-app-name",
          "type": "specific-destination-only"
        }
      },
      "apn-profiles": {
        "apn-profile1": {
          "apn-name": "internet",
          "dns_primary": "8.8.8.4",
          "dns_secondary": "8.8.8.8",
          "gx_enabled": true,
          "mtu": 1460,
          "network": "lbo",
          "usage": 1
        }
      },
      "qos-profiles": {
        "mobile": {
          "apn-ambr": [
            12345678,
            12345678
          ],
          "arp": 1,
          "qci": 9
        },
        "qos-profile1": {
          "apn-ambr": [
            12345678,
            12345678
          ],
          "arp": 1,
          "qci": 9
        }
      },
      "subscriber-selection-rules": [
        {
          "keys": {
            "imsi-range": {
              "from": 200000000000000,
              "to": 299999999999999
            },
            "serving-plmn": {
              "mcc": 208,
              "mnc": 10,
              "tac": 1
            }
          },
          "priority": 5,
          "selected-access-profile": [
            "access-all"
          ],
          "selected-apn-profile": "apn-profile1",
          "selected-qos-profile": "qos-profile1",
          "selected-user-plane-profile": "user-plane1"
        },
        {
          "keys": {
            "match-all": true
          },
          "priority": 10,
          "selected-access-profile": [
            "access-all"
          ],
          "selected-apn-profile": "apn-profile1",
          "selected-qos-profile": "qos-profile1",
          "selected-user-plane-profile": "user-plane1"
        }
      ],
      "user-plane-profiles": {
        "user-plane1": {
          "access-tags": {
            "tag1": "ACC"
          },
          "global-address": true,
          "qos-tags": {
            "tag1": "BW"
          },
          "user-plane": "upf"
        }
      }
    }
---
# Source: omec-control-plane/templates/configmap-spgwc.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spgwc-scripts
  labels:
    release: sdcore4g
    app: spgwc
data:
  spgwc-run.sh: |
    #!/bin/bash
    
    # Copyright 2019-present Open Networking Foundation
    #
    # SPDX-License-Identifier: Apache-2.0
    
    APPLICATION=$1
    set -xe
    
    mkdir -p /opt/cp/config
    cd /opt/cp/config
    cp /etc/cp/config/{*.json,*.conf} .
    
    case $APPLICATION in
        "ngic_controlplane")
          echo "Starting ngic controlplane app"
          cat /opt/cp/config/cp.json
          cat /opt/cp/config/subscriber_mapping.json
          cp /bin/ngic_controlplane /tmp/coredump/
    
          ngic_controlplane -f /etc/cp/config/
          ;;
    
        "gx-app")
          echo "Starting gx-app"
          SPGWC_IDENTITY="spgwc.default.svc.cluster.local";
          DIAMETER_HOST=$(echo $SPGWC_IDENTITY| cut -d'.' -f1)
          DIAMETER_REALM="default.svc.cluster.local";
          chmod +x /bin/make_certs.sh
          cp /bin/make_certs.sh /opt/cp/config
          /bin/make_certs.sh $DIAMETER_HOST $DIAMETER_REALM
          cp /bin/gx_app /tmp/coredump/
          cd /opt/cp/
          gx_app
          ;;
    
        *)
          echo "invalid app $APPLICATION"
          ;;
    esac
    
  spgwc-init.sh: |
    #!/bin/sh
    
    # Copyright 2021-present Open Networking Foundation
    #
    # SPDX-License-Identifier: Apache-2.0
    
    while ! curl -f --connect-timeout 5 http://spgwc:8080/startup
    do
      echo Waiting for SPGWC to be ready
      sleep 5
    done
    echo SPGWC is ready
    
    echo Posting to sync URL 
    while ! curl --connect-timeout 5 -f -X POST 
    do
      echo Failed posting to sync URL
      sleep 5
    done
    echo
    
    echo Sleeping forever
    while true
    do
      sleep 86400
    done
